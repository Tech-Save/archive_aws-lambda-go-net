Parameters:

  S3Bucket:
    Type: String

Resources:

  LWAExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Principal: {Service: lambda.amazonaws.com}
          Action: sts:AssumeRole
          Effect: Allow
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  LWAFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: handler.zip
      Role: !GetAtt [LWAExecutionRole, Arn]
      Handler: handler.handle
      Runtime: python2.7
      MemorySize: 128
      Timeout: 3

  LWAInvocationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Principal: {Service: apigateway.amazonaws.com}
          Action: sts:AssumeRole
          Effect: Allow
      Policies:
        - PolicyName: InvokeFunction
          PolicyDocument:
            Statement:
              - Resource: !GetAtt [LWAFunction, Arn]
                Action: lambda:InvokeFunction
                Effect: Allow

  LWAAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: hello-world-lwa

  LWAAPIProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref LWAAPI
      ParentId: !GetAtt [LWAAPI, RootResourceId]
      PathPart: "{proxy+}"

  LWAAPIRootAnyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref LWAAPI
      ResourceId: !GetAtt [LWAAPI, RootResourceId]
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Credentials: !GetAtt [LWAInvocationRole, Arn]
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LWAFunction}/invocations

  LWAAPIProxyAnyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref LWAAPI
      ResourceId: !Ref LWAAPIProxyResource
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Credentials: !GetAtt [LWAInvocationRole, Arn]
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LWAFunction}/invocations

  LWAAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - LWAAPIRootAnyMethod
      - LWAAPIProxyAnyMethod
    Properties:
      RestApiId: !Ref LWAAPI

  LWAAPIStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: stage
      RestApiId: !Ref LWAAPI
      DeploymentId: !Ref LWAAPIDeployment

Outputs:

  LWAAPIURL:
    Value: !Sub "https://${LWAAPI}.execute-api.${AWS::Region}.amazonaws.com/stage/"
